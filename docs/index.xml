<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home Page on CodeRant</title><link>/</link><description>Recent content in Home Page on CodeRant</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 12 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>FileSync to speed up development workflows with Skaffold</title><link>/post/2022-02-12-skaffold-better-refresh/</link><pubDate>Sat, 12 Feb 2022 00:00:00 +0000</pubDate><guid>/post/2022-02-12-skaffold-better-refresh/</guid><description>Before reading this post Before reading this post, check out the previous post to see how we got here.
Adding FileSync Skaffold watches for changes and rebuilds the containers by default. However, completely rebuilding the container can quickly become very impractical.
To get around this, we can use the FileSync to tell Skaffold to copy changes to an already-built container instead of rebuilding the whole thing. For our project from the previous post, this will be fairly simple: adjust your skaffold.</description></item><item><title>Moving a docker-compose workflow to Kubernetes with Skaffold</title><link>/post/2022-01-31-compose-to-skaffold/</link><pubDate>Mon, 31 Jan 2022 00:00:00 +0000</pubDate><guid>/post/2022-01-31-compose-to-skaffold/</guid><description>Introduction and motivation In this post, we&amp;rsquo;ll go through creating a small stub server using Go, and we&amp;rsquo;ll deploy it in a development environment using docker-compose. After that, we&amp;rsquo;ll see (and do) what it takes to move this workflow to use kubernetes to manage the containers instead.
This post is partially motivated by docker&amp;rsquo;s recent changes to their licensing model and partially motivated by just wanting to learn more about kubernetes and help close the gap between workloads in production and workloads in development.</description></item><item><title>Amplify</title><link>/post/2022-01-30-amplify/</link><pubDate>Sun, 30 Jan 2022 00:00:00 +0000</pubDate><guid>/post/2022-01-30-amplify/</guid><description>Over the last couple of days, I decided to take a bit of a dive into AWS&amp;rsquo;s Amplify service and see what exactly it had to offer in terms of creating and deploying a web-based application. As Amazon describes it, &amp;ldquo;AWS Amplify is a set of purpose-built tools and features that lets frontend web and mobile developers quickly and easily build full-stack applications&amp;rdquo;, so I was curious to see really how quick and easy this process was.</description></item><item><title>Accept Interface, Return Concrete Type, But What About Slices?</title><link>/post/2022-01-23-go-slice-of-interface/</link><pubDate>Sun, 23 Jan 2022 00:00:00 +0000</pubDate><guid>/post/2022-01-23-go-slice-of-interface/</guid><description>1. A Quick Introduction One of Go&amp;rsquo;s commonly known characteristics has long been the implicit satisfaction of interfaces. Implicitly satisfying interfaces can (and has been) useful in many situations, especially those around file and network I/O. This post isn&amp;rsquo;t here to change anyone&amp;rsquo;s opinion about this design choice, but rather to point out a small inconsistency I&amp;rsquo;ve recently noticed through my day-to-day encounters with the language.
Although not explicitly a Go Proverb, &amp;ldquo;accept interfaces and return concrete types&amp;rdquo; has been is something I&amp;rsquo;ve heard many times throughout my short professional experience with the language.</description></item></channel></rss>