<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on CodeRant</title><link>/post/</link><description>Recent content in Posts on CodeRant</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 23 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Accept Interface, Return Concrete Type, But What About Slices?</title><link>/post/2022/01/23/accept-interface-return-concrete-type-but-what-about-slices/</link><pubDate>Sun, 23 Jan 2022 00:00:00 +0000</pubDate><guid>/post/2022/01/23/accept-interface-return-concrete-type-but-what-about-slices/</guid><description>1. A Quick Introduction One of Go&amp;rsquo;s commonly known characteristics has long been the implicit satisfaction of interfaces. Implicitly satisfying interfaces can (and has been) useful in many situations, especially those around file and network I/O. This post isn&amp;rsquo;t here to change anyone&amp;rsquo;s opinion about this design choice, but rather to point out a small inconsistency I&amp;rsquo;ve recently noticed through my day-to-day encounters with the language.
Although not explicitly a Go Proverb, &amp;ldquo;accept interfaces and return concrete types&amp;rdquo; has been is something I&amp;rsquo;ve heard many times throughout my short professional experience with the language.</description></item></channel></rss>